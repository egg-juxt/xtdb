AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  # From other templates
  SecurityGroupId:
    Description: Group ID of the security group to be used by the ECS nodes
    Type: AWS::EC2::SecurityGroup::Id

  PublicSubnets:
    Description: List of public subnets to host the load balancer on
    Type: List<AWS::EC2::Subnet::Id>

  S3BucketName:
    Description: Name of the S3 bucket to use as the XTDB object store
    Type: String

  S3AccessPolicyArn:
    Description: ARN of the managed policy offering access to all the S3 permissions necessary for the object store
    Type: String

  MSKBootstrapServers:
    Description: Comma separated list containing all Kafka bootstrap server URLs from MSK
    Type: String

  MSKAccessPolicyArn:
    Description: ARN of the managed policy offering access to all the MSK permissions
    Type: String

  # For this template
  DesiredTaskCount:
    Type: Number
    Default: 0
    Description: The desired number of ECS tasks to run.

  TaskMemory:
    Type: String
    Default: '4096'
    Description: The amount of memory (in MiB) to allocate for the ECS task.

  XtdbLogTopicName:
    Type: String
    Default: 'xtdb-bench-log'
    Description: The name of the Kafka topic to use for the XTDB log

  ImageId:
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2023/recommended/image_id
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: Use an ECS Optimized Image from SSM Parameter Store

  AuctionmarkDuration:
    Type: String
    Default: PT1M
    Description: How long to run Auctionmark for

  AuctionmarkScaleFactor:
    Type: String
    Default: '0.1'
    Description: Scale factor of Auctionmark data load

  AuctionmarkLoadPhase:
    Type: String
    Default: 'True'
    Description: Whether or not to run the load phase of Auctionmark in the full benchmark

  AuctionmarkRunLoadPhaseOnly:
    Type: String
    Default: 'False'
    Description: Whether or not to ONLY run the load phase portion of Auctionmark

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Parameters/resources from other stacks"
        Parameters:
          - SecurityGroupId
          - PublicSubnets
          - S3BucketName
          - S3AccessPolicyArn
          - MSKBootstrapServers
          - MSKAccessPolicyArn
      - Label:
          default: "ECS Task Configuration"
        Parameters:
          - DesiredTaskCount
          - TaskMemory
          - ImageId
      - Label:
          default: "XTDB Configuration & Auctionmark Configuration"
        Parameters:
          - XtdbLogTopicName
          - AuctionmarkDuration
          - AuctionmarkScaleFactor
          - AuctionmarkLoadPhase
          - AuctionmarkRunLoadPhaseOnly


Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: 'xtdb-bench-cluster'
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: 'xtdb-aws-bench'

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: 'xtdb-aws-bench'
      RetentionInDays: 365

  BenchSecrets:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: bench/secrets
      Description: Slack webhook URL
      SecretString: '{"SLACK_WEBHOOK_URL": ""}'

  TaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'ecs-tasks.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Policies:
        - PolicyName: SecretsManagerAccessPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref BenchSecrets

  ECSTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'ecs-tasks.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: ECSCloudWatchPolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - cloudwatch:PutMetricData
              # Resource: !GetAtt LogGroup.Arn
              Resource: '*'
      ManagedPolicyArns:
        - !Ref S3AccessPolicyArn
        - !Ref MSKAccessPolicyArn

  ECSServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:RegisterTargets'
                  - 'ec2:Describe*'
                  - 'ec2:AuthorizeSecurityGroupIngress'
                Resource: '*'

  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: 'xtdb-bench-task'
      RequiresCompatibilities:
        - 'EC2'
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      NetworkMode: 'bridge'
      ContainerDefinitions:
        - Name: 'xtdb-container'
          Image: !Join [':', [ !GetAtt [ 'ECRRepository', 'RepositoryUri' ], 'latest' ] ]
          Essential: true
          MountPoints:
          - ContainerPath: /var/lib/xtdb
            SourceVolume: xtdb-volume
          MemoryReservation: !Ref TaskMemory
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: xtdb
          Environment:
            - Name: CLOUD_PLATFORM_NAME
              Value: 'AWS'
            - Name: KAFKA_BOOTSTRAP_SERVERS
              Value: !Ref MSKBootstrapServers
            - Name: XTDB_LOG_TOPIC
              Value: xtdb-log
            - Name: XTDB_S3_BUCKET
              Value: !Ref S3BucketName
            - Name: AUCTIONMARK_DURATION
              Value: !Ref AuctionmarkDuration
            - Name: AUCTIONMARK_SCALE_FACTOR
              Value: !Ref AuctionmarkScaleFactor
            - Name: AUCTIONMARK_LOAD_PHASE
              Value: !Ref AuctionmarkLoadPhase
            - Name: AUCTIONMARK_LOAD_PHASE_ONLY
              Value: !Ref AuctionmarkRunLoadPhaseOnly
          Secrets:
            - Name: "BENCH_SECRETS"
              ValueFrom: !Ref BenchSecrets

      Volumes:
        - Name: xtdb-volume
          Host:
            SourcePath: "/mnt/nvme-storage/xtdb"

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role'

  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    DependsOn: ECSCluster
    Properties:
      ImageId: !Ref ImageId
      InstanceType: i3.2xlarge
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroups:
        - !Ref SecurityGroupId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # Setup for ECS
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config

          # Identify NVMe drives
          NVME_DEVICES=$(lsblk -o NAME,TRAN | grep nvme | awk '{print $1}')

          # Format and mount single NVME drive only
          for DEVICE in $NVME_DEVICES; do
            mkfs -t xfs /dev/$DEVICE
            mkdir -p /mnt/nvme-storage
            mount /dev/$DEVICE /mnt/nvme-storage
            break
          done

          # Send signal to group to mark as successfully created to the scaling group
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}

  ECSAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Ref PublicSubnets
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: 0
      MaxSize: 1
      DesiredCapacity: 0
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'

  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      LaunchType: 'EC2'
      DesiredCount: !Ref DesiredTaskCount

Outputs:
  ECRRepositoryUri:
    Description: The ECR Repository URI
    Value: !GetAtt [ 'ECRRepository', 'RepositoryUri' ]
